version: 2.1

commands:
  install_aws:
    steps:
      - run:
          name: "Install AWS CLI"
          command: |
            apk add --no-cache python py-pip
            pip install awscli
            aws --version
  destroy_backend_frontend:
    steps:
      - run:
          name: Destroy environment
          command: |
            # aws s3 rb s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --force
            # aws cloudformation delete-stack --stack-name frontend-stack
            aws cloudformation delete-stack --stack-name backend-stack
          when: on_fail  
  db_rollback:
    steps:
      - run:
          name: "DB Rollback"
          command: |
            cd backend
            npm install
            if 
              (( $( curl -H "token: 43f5331f-b3fe-41b4-8f33-1ef7fd665b51" --request GET https://api.memstash.io/values/migration_status ) == 0 )) ; \
            then 
              npm run migrations:revert
              echo "Reverting migrations"
            else
              echo "No migration to revert"
            fi
          when: on_fail
      - run:
          when: on_fail
          name: Prevents the workflow from continuing
          command: |
            circleci-agent step halt
jobs:
  hello-world: # Delete this job when you get started
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Say Hello
          command: |
            echo "Hello World"

  build-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build Frontend
            command: |
              cd frontend
              npm i
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  build-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Build Backend
            command: |
              cd backend
              npm i
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Test Frontend
            command: |
              cd frontend
              npm i
              npm run test
              
  test-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Test Backend
            command: |
              cd backend
              npm i
              npm run test

  scan-frontend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - run:
            name: Audit Frontend
            command: |
              cd frontend
              npm i
              npm audit --audit-level=critical
  scan-backend:
      docker:
        - image: circleci/node
      steps:
        - checkout
        - run:
            name: Audit Backend
            command: |
              cd backend
              npm i
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - install_aws
      - run:
          name: Deploy Backend Infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
            --stack-name backend-stack
      # - run:
      #     name: Deploy Frontend Infrastructure
      #     command: |
      #       cd .circleci/files
      #       aws cloudformation deploy \
      #       --template-file frontend.yml \
      #       --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  \
      #       --stack-name frontend-stack
      - run:
          name: Add Backend EC2 Instance IP to inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_backend_frontend

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e3:dd:30:10:b4:ea:8f:58:06:6c:97:0b:98:32:85:1d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Add env file
          command: |
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            echo "ENVIRONMENT=${ENVIRONMENT}" >> backend/.env
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            tar -czvf ../../backend.tar.gz ../../backend
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_backend_frontend

  deploy-frontend:
    docker:
      - image: circleci/python:3.8.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --delete
      - destroy_backend_frontend
      - db_rollback
      
  smoke-test:
    docker:
      - image: circleci/python:3.8.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            curl "${API_URL}/api/status"
      # - run:
      #     name: Smoke test frontend
      #     command: |
      #       export S3_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html#/employees"
      #       if curl -s ${S3_URL} | grep "Welcome"
      #       then
      #         exit 1
      #       else
      #         exit 0
      #       fi
      - destroy_backend_frontend
      - db_rollback

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Invalidating CloudFront files"
          command: | 
            aws cloudfront create-invalidation --distribution-id E2S58QTEA4E62N --paths "/*"
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - deploy-frontend:
      #     requires: [configure-infrastructure]
      - smoke-test:
          requires: [configure-infrastructure]
      # - cloudfront-update:
      #     requires: [smoke-test]